#ifndef SPLAY_HPP
#define SPLAY_HPP


/*****Datos administrativos************************
 * Nombre del archivo: Splay.hpp
 * Tipo de archivo: hpp
 * Proyecto: #3 XML
 * Autor: Yosimar, Yeremi,Sidney,Bryan
 * Empresa:Tecnológico de Costa Rica
 *****Descripción**********************************
 * En este archivo se encontraron funciones y metodos para la creacion de un arbol de tipo Splay
 * 
 *****Versión**************************************
 * ## | Fecha y hora | Autor
 * 1.0  12/05/2024     Yosimar, Yeremi,Sidney,Bryan
 **************************************************/


/*****Nombre***************************************
 * Splay.hpp
 *****Descripción**********************************
 * Creación del arbol de Splay para facilitar el uso del XML
 *****Atributos************************************
 * apRoot, apZig, apZag, apSplay
 *****Métodos**************************************
 * Insert
 **************************************************/

#include "Node.hpp"

class Splay {
private:
    Node *apRoot;

    Node* apZig(Node* x);
    Node* apZag(Node* x);
    Node* apSplay(Node* x);
    void balanceSplay(Node* node);
    void updateHeight(Node* node);
    int getBalanceFactor(Node* node);
    Node* rotateLeft(Node* x);
    Node* rotateRight(Node* x);
public:
    Splay();
    ~Splay();

    void insert(const char* value);
    // Accesores
};



/*****Nombre***************************************
 * apRoot
 *****Descripción**********************************
 * 
 *****Retorno**************************************
 * 
 *****Entradas*************************************
 * nullptr
 **************************************************/
Splay::Splay() : apRoot(nullptr) {}

Splay::~Splay() {
    delete apRoot;
}


/*****Nombre***************************************
 * apZig
 *****Descripción**********************************
 * 
 *****Retorno**************************************
 * retorna una variable y
 *****Entradas*************************************
 * Node* x
 **************************************************/



// rotación hacia la izquierda
Node* Splay::apZig(Node* x) {
    Node* y = x->getRight();
    x->setRight(y->getLeft());
    if (y->getLeft() != nullptr) y->getLeft()->setParent(x);
    y->setParent(x->getParent());
    if (x->getParent() == nullptr) apRoot = y;
    else if (x == x->getParent()->getLeft()) x->getParent()->setLeft(y);
    else x->getParent()->setRight(y);
    y->setLeft(x);
    x->setParent(y);
    return y;
}

Node* Splay::apZag(Node* x) {
    Node* y = x->getLeft();
    x->setLeft(y->getRight());
    if (y->getRight() != nullptr) y->getRight()->setParent(x);
    y->setParent(x->getParent());
    if (x->getParent() == nullptr) apRoot = y;
    else if (x == x->getParent()->getRight()) x->getParent()->setRight(y);
    else x->getParent()->setLeft(y);
    y->setRight(x);
    x->setParent(y);
    return y;
}

void Splay::balanceSplay(Node* node) {
    while (node != nullptr) {
        updateHeight(node);
        int balanceFactor = getBalanceFactor(node);
        if (balanceFactor > 1) {
            if (getBalanceFactor(node->getLeft()) >= 0) {
                node = rotateRight(node);
            } else {
                node->setLeft(rotateLeft(node->getLeft()));
                node = rotateRight(node);
            }
        } else if (balanceFactor < -1) {
            if (getBalanceFactor(node->getRight()) <= 0) {
                node = rotateLeft(node);
            } else {
                node->setRight(rotateRight(node->getRight()));
                node = rotateLeft(node);
            }
        }
        node = node->getParent();
    }
}

Node* Splay::rotateLeft(Node* x) {
    Node* y = x->getRight();
    x->setRight(y->getLeft());
    if (y->getLeft() != nullptr) y->getLeft()->setParent(x);
    y->setParent(x->getParent());
    if (x->getParent() == nullptr) apRoot = y;
    else if (x == x->getParent()->getLeft()) x->getParent()->setLeft(y);
    else x->getParent()->setRight(y);
    y->setLeft(x);
    x->setParent(y);
    updateHeight(x);
    updateHeight(y);
    return y;
}

Node* Splay::rotateRight(Node* x) {
    Node* y = x->getLeft();
    x->setLeft(y->getRight());
    if (y->getRight() != nullptr) y->getRight()->setParent(x);
    y->setParent(x->getParent());
    if (x->getParent() == nullptr) apRoot = y;
    else if (x == x->getParent()->getRight()) x->getParent()->setRight(y);
    else x->getParent()->setLeft(y);
    y->setRight(x);
    x->setParent(y);
    updateHeight(x);
    updateHeight(y);
    return y;
}

void Splay::updateHeight(Node* node) {
    if (node == nullptr) return;
    int leftHeight = (node->getLeft() ? node->getLeft()->getHeight() : -1);
    int rightHeight = (node->getRight() ? node->getRight()->getHeight() : -1);
    node->setHeight(1 + std::max(leftHeight, rightHeight));
}

int Splay::getBalanceFactor(Node* node) {
    if (node == nullptr) return 0;
    int leftHeight = (node->getLeft() ? node->getLeft()->getHeight() : 0);
    int rightHeight = (node->getRight() ? node->getRight()->getHeight() : 0);
    return leftHeight - rightHeight;
}

Node* Splay::apSplay(Node* x) {
    while (x->getParent() != nullptr) {
        if (x->getParent()->getParent() == nullptr) {
            if (x->getParent()->getLeft() == x) x = apZag(x->getParent());
            else x = apZig(x->getParent());
        } else if (x->getParent()->getLeft() == x && x->getParent()->getParent()->getLeft() == x->getParent()) {
            x = apZag(apZag(x->getParent()->getParent()));
        } else if (x->getParent()->getRight() == x && x->getParent()->getParent()->getRight() == x->getParent()) {
            x = apZig(apZig(x->getParent()->getParent()));
        } else if (x->getParent()->getRight() == x && x->getParent()->getParent()->getLeft() == x->getParent()) {
            x = apZig(apZag(x->getParent()->getParent()));
        } else {
            x = apZag(apZig(x->getParent()->getParent()));
        }
    }
    apRoot = x;
    return x;
}

void Splay::insert(const char* value) {
    Node* newNode = new Node(value);
    if (apRoot == nullptr) {
        apRoot = newNode;
    } else {
        Node* current = apRoot;
        Node* parent = nullptr;

        while (current != nullptr) {
            parent = current;
            if (strcmp(value, current->getValue()) < 0) {
                current = current->getLeft();
            } else {
                current = current->getRight();
            }
        }

        if (strcmp(value, parent->getValue()) < 0) {
            parent->setLeft(newNode);
        } else {
            parent->setRight(newNode);
        }

        newNode->setParent(parent);

        balanceSplay(newNode);

        apRoot = apSplay(newNode);
    }
}
#endif
